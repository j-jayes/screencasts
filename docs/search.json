[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Screencasts",
    "section": "",
    "text": "Chocolate bar ratings\n\n\nAn exploration of chocolte bar ratings\n\n\n\nJonathan\n\n\nApr 15, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGender Equality Index in the EU\n\n\nUsing ggiraph to recreate an interactive visualization from The Economist.\n\n\n\nJonathan\n\n\nAug 20, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRecreating Ed Hawkins’ Show Your Stripes graphic\n\n\nUsing ggplot to recreate a classic climate change visualization.\n\n\n\nJonathan\n\n\nApr 1, 2022\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "pipeline/Ideas.html",
    "href": "pipeline/Ideas.html",
    "title": "Ideas",
    "section": "",
    "text": "knitr::include_url(\"https://www.economist.com/graphic-detail/glass-ceiling-index\")\n\n\n\n\n\n\nTo recreate the chart shown in the economist\nResearch article:\n\nknitr::include_url(\"https://www.nature.com/articles/s41558-021-01263-8#data-availability\")\n\n\n\nReplication data:\n\nknitr::include_url(\"https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/D2STBL\")"
  },
  {
    "objectID": "pipeline/Intro.html",
    "href": "pipeline/Intro.html",
    "title": "Intro and such",
    "section": "",
    "text": "What format do I want the intro to be in?\n\nDavid Robinson\nHi - I’m Jonathan and welcome to another one of my screencasts.\nAs usual, the data comes from…\nLet’s see what we are looking at this week.\n\n\nJulia Silge\nhi my name is julia silgi and i’m a data scientist and software engineer at R studio and today in this screencast we’re going to use some recent tidy tuesday data on collegiate sports in the u.s and .\n\n\nMicrophone in view\nI think this is fine because the audio quality is better.\nI also think standing is nice because it means that my voice is more clear.\n\n\nAndrew Couch\nhey y’all it’s andrew couch here and in this tidy tuesday video we’re not gonna be looking at this week’s data set instead we’re gonna build upon our tidy models videos."
  },
  {
    "objectID": "rmd/Show_your_stripes.html",
    "href": "rmd/Show_your_stripes.html",
    "title": "Untitled",
    "section": "",
    "text": "Reading in the data\n\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.6      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\ndf <- readr::read_csv(\"https://www.metoffice.gov.uk/hadobs/hadcrut5/data/current/analysis/diagnostics/HadCRUT.5.0.1.0.analysis.summary_series.global.monthly.csv\")\n\nRows: 2073 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): Time\ndbl (3): Anomaly (deg C), Lower confidence limit (2.5%), Upper confidence li...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ndf\n\n# A tibble: 2,073 × 4\n   Time    `Anomaly (deg C)` `Lower confidence limit (2.5%)` Upper confidence …¹\n   <chr>               <dbl>                           <dbl>               <dbl>\n 1 1850-01            -0.675                          -0.982             -0.367 \n 2 1850-02            -0.333                          -0.701              0.0341\n 3 1850-03            -0.591                          -0.934             -0.249 \n 4 1850-04            -0.589                          -0.898             -0.279 \n 5 1850-05            -0.508                          -0.761             -0.255 \n 6 1850-06            -0.344                          -0.609             -0.0790\n 7 1850-07            -0.160                          -0.397              0.0776\n 8 1850-08            -0.208                          -0.465              0.0495\n 9 1850-09            -0.385                          -0.648             -0.122 \n10 1850-10            -0.533                          -0.783             -0.284 \n# … with 2,063 more rows, and abbreviated variable name\n#   ¹​`Upper confidence limit (97.5%)`\n\n\n\ndf %>% colnames()\n\n[1] \"Time\"                           \"Anomaly (deg C)\"               \n[3] \"Lower confidence limit (2.5%)\"  \"Upper confidence limit (97.5%)\"\n\n\n\ndf <- df %>% \n  janitor::clean_names()\n\ndf\n\n# A tibble: 2,073 × 4\n   time    anomaly_deg_c lower_confidence_limit_2_5_percent upper_confidence_l…¹\n   <chr>           <dbl>                              <dbl>                <dbl>\n 1 1850-01        -0.675                             -0.982              -0.367 \n 2 1850-02        -0.333                             -0.701               0.0341\n 3 1850-03        -0.591                             -0.934              -0.249 \n 4 1850-04        -0.589                             -0.898              -0.279 \n 5 1850-05        -0.508                             -0.761              -0.255 \n 6 1850-06        -0.344                             -0.609              -0.0790\n 7 1850-07        -0.160                             -0.397               0.0776\n 8 1850-08        -0.208                             -0.465               0.0495\n 9 1850-09        -0.385                             -0.648              -0.122 \n10 1850-10        -0.533                             -0.783              -0.284 \n# … with 2,063 more rows, and abbreviated variable name\n#   ¹​upper_confidence_limit_97_5_percent\n\n\n\n\nEDA\n\ndf %>% skimr::skim()\n\n\nData summary\n\n\nName\nPiped data\n\n\nNumber of rows\n2073\n\n\nNumber of columns\n4\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ntime\n0\n1\n7\n7\n0\n2073\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nanomaly_deg_c\n0\n1\n-0.08\n0.39\n-1.04\n-0.35\n-0.16\n0.11\n1.22\n▁▇▅▂▁\n\n\nlower_confidence_limit_2_5_percent\n0\n1\n-0.22\n0.44\n-1.22\n-0.55\n-0.31\n0.01\n1.18\n▁▇▅▂▁\n\n\nupper_confidence_limit_97_5_percent\n0\n1\n0.06\n0.34\n-0.87\n-0.17\n0.00\n0.22\n1.26\n▁▇▆▂▁\n\n\n\n\n\n\ndf %>% \n  ggplot(aes(x = time, y = anomaly_deg_c)) +\n  geom_point()\n\n\n\n\n\ndf %>% \n  select(time)\n\n# A tibble: 2,073 × 1\n   time   \n   <chr>  \n 1 1850-01\n 2 1850-02\n 3 1850-03\n 4 1850-04\n 5 1850-05\n 6 1850-06\n 7 1850-07\n 8 1850-08\n 9 1850-09\n10 1850-10\n# … with 2,063 more rows\n\n\n\ndf <- df %>% \n  mutate(time = lubridate::ymd(paste0(time, \"-01\")))\n\n\ndf %>% \n  ggplot(aes(x = time, y = anomaly_deg_c)) +\n  geom_point() +\n  geom_smooth() +\n  geom_hline(yintercept = 0, lty = 2)\n\n`geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\n\nRecreating the figure\n\ndf %>% \n  ggplot(aes(x = time, y = 1, fill = anomaly_deg_c)) +\n  geom_tile() +\n  scale_fill_gradient2(low = \"blue\", high = \"red\", mid = \"white\",\n                       midpoint = 0) +\n  theme(legend.position = \"none\",\n        panel.grid = element_blank(),\n        axis.ticks.y = element_blank(),\n        axis.text.y = element_blank()) +\n  labs(x = \"Year\",\n       y = NULL,\n       caption = \"Inspred by Ed Hawkins\\nData from the Met Office\")\n\n\n\n\n\ndf <- df %>% \n  mutate(year = lubridate::year(time)) %>% \n  group_by(year) %>% \n  mutate(across(anomaly_deg_c:upper_confidence_limit_97_5_percent, mean)) %>% \n  ungroup() %>% \n  distinct(year, .keep_all = T)\n\n\ndf %>% \n    ggplot(aes(x = time, y = 1, fill = anomaly_deg_c)) +\n  geom_tile() +\n  scale_fill_gradient2(low = \"blue\", high = \"red\", mid = \"white\",\n                       midpoint = 0) +\n  theme(legend.position = \"none\",\n        panel.grid = element_blank(),\n        axis.ticks.y = element_blank(),\n        axis.text.y = element_blank()) +\n  labs(x = \"Year\",\n       y = NULL,\n       caption = \"Inspred by Ed Hawkins\\nData from the Met Office\")\n\n\n\n\n\n\nInteractivity\n\nlibrary(ggiraph)\n\ng <- df %>%\n  mutate(tooltip = str_c(\"Deviation from base period in \", year, \"\\n\", round(anomaly_deg_c, 2), \" c\")) %>% \n  ggplot(aes(x = time, y = 1, fill = anomaly_deg_c, tooltip = tooltip)) +\n  geom_tile_interactive() +\n  scale_fill_gradient2(\n    low = \"blue\", high = \"red\", mid = \"white\",\n    midpoint = 0\n  ) +\n  theme(\n    legend.position = \"none\",\n    panel.grid = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.text.y = element_blank()\n  ) +\n  labs(\n    x = \"Year\",\n    y = NULL,\n    caption = \"Inspred by Ed Hawkins\\nData from the Met Office\"\n  )\n\nggiraph(ggobj = g)"
  },
  {
    "objectID": "code/Chocolate_bar_ratings.html",
    "href": "code/Chocolate_bar_ratings.html",
    "title": "Chocolate bar ratings",
    "section": "",
    "text": "Hello and welcome to the first episode of Kathy’s coding club. Today we’re doing to be looking at one of Kathy’s favourite foodstuffs – chocolate.\nWe’re going to be diving into the reviews of chocolate bars from the Manhattan Chocolate Society, who have rated over 2500 chocolate bars from around the world. We are going to be trying to answer a few questions about their ratings.\nThe data is accessible from the R for Data Science Tidy Tuesday repository on Github.\nIf you have any questions about the different commands that we use and why - have a look at this post on my website. You can click on any of the commands and read the documentation to get a better understanding of how they are used, or which package they are from.\nThen let’s get to it - the first step is to open a fresh Rmarkdown document - this allows you to keep human readable notes interspersed with your code that you can return to later, and export the prose and code in a number of different ways to share it, with colleagues or on the internet.\nThe next thing which I think is worth doing is to change the default IDE theme in Rstudio to darkmode. This is easier on your eyes and makes you look professional. You can find the Rstudio appearance settings under tools, and then global options. I like the Cobalt theme, but there are many to choose from.\nOne other thing I would suggest is the use of rainbow parentheses - these make it easy to see where you’re missing a bracket. You can enable them under the code tab in Global options.\nGreat - then let’s get to it!\nFirst we will call the tidyverse meta package - a cohesive group of packages that make working with messy data very easy - originally coined by Hadley Wickham but improved upon by a great many contributors. I’ll leave a link in the description to more info about this.\nThen we read in the data from the R4DS Tidy Tuesday Repo.\n\nlibrary(tidyverse)\n\ndf <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-01-18/chocolate.csv')\n\ntheme_set(theme_light())\n\nExploratory data analysis\nFirst we can have a look at the data we have read in - This gives us a tibble (similar to a dataframe) with 10 columns (3 numeric and 7 character) and 2,530 individual reviews.\n\ndf %>% \n  skimr::skim()\n\n\nData summary\n\n\nName\nPiped data\n\n\nNumber of rows\n2530\n\n\nNumber of columns\n10\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n7\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\ncompany_manufacturer\n0\n1.00\n2\n39\n0\n580\n0\n\n\ncompany_location\n0\n1.00\n4\n21\n0\n67\n0\n\n\ncountry_of_bean_origin\n0\n1.00\n4\n21\n0\n62\n0\n\n\nspecific_bean_origin_or_bar_name\n0\n1.00\n3\n51\n0\n1605\n0\n\n\ncocoa_percent\n0\n1.00\n3\n6\n0\n46\n0\n\n\ningredients\n87\n0.97\n4\n14\n0\n21\n0\n\n\nmost_memorable_characteristics\n0\n1.00\n3\n37\n0\n2487\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\nref\n0\n1\n1429.80\n757.65\n5\n802\n1454.00\n2079.0\n2712\n▆▇▇▇▇\n\n\nreview_date\n0\n1\n2014.37\n3.97\n2006\n2012\n2015.00\n2018.0\n2021\n▃▅▇▆▅\n\n\nrating\n0\n1\n3.20\n0.45\n1\n3\n3.25\n3.5\n4\n▁▁▅▇▇\n\n\n\n\n\nNext we can look at some of the common countries in which the beans are processed into bars, as well as where the beans originate.\n\ndf %>% \n  count(company_location, sort = T)\n\n# A tibble: 67 x 2\n   company_location     n\n   <chr>            <int>\n 1 U.S.A.            1136\n 2 Canada             177\n 3 France             176\n 4 U.K.               133\n 5 Italy               78\n 6 Belgium             63\n 7 Ecuador             58\n 8 Australia           53\n 9 Switzerland         44\n10 Germany             42\n# ... with 57 more rows\n\ndf %>% \n  count(country_of_bean_origin, sort = T)\n\n# A tibble: 62 x 2\n   country_of_bean_origin     n\n   <chr>                  <int>\n 1 Venezuela                253\n 2 Peru                     244\n 3 Dominican Republic       226\n 4 Ecuador                  219\n 5 Madagascar               177\n 6 Blend                    156\n 7 Nicaragua                100\n 8 Bolivia                   80\n 9 Colombia                  79\n10 Tanzania                  79\n# ... with 52 more rows\n\n\nLooking at the bar ratings, we can see a distribution that is centred just above 3 - this is in line with what we saw from the skim of the dataset above - a mean rating of 3.2\n\ndf %>%\n  ggplot(aes(rating)) +\n  geom_histogram(binwidth = .25, fill = \"midnightblue\") +\n  labs(x = \"Chocolate bar rating\",\n       y = \"Number of bars\")\n\n\n\n\nInitial questions\n\nHave ratings been going up over time?\n\nThe first simple plot we can make to examine this question is a boxplot - we can use ggplot to create a boxplot, mapping review date to the x axis, rating to the y axis, and we include the command group = review_date.\n\ndf %>% \n  ggplot(aes(review_date, rating, group = review_date)) +\n  geom_boxplot()\n\n\n\n\nGreat - we can see that the median ranges between 3 and 3.25, increasing in 2010. We can also see that the bottom of the distribution has moved up over time. In other words, there are fewer low scoring chocolate bars over time - potentially indicating an increase in quality of the bars or greater leniency on the part of the reviewers.\nWe can visualize this distribution with the help of another package called ggridges.\nI’ll build up this visualization in stages:\nWe’ll start by mapping the ratings onto the x-axis, the year of the review onto the y-axis (as a factor rather than as a continuous variable).\n\nlibrary(ggridges)\n\ndf %>% \n  ggplot(aes(rating, y = factor(review_date))) +\n  geom_density_ridges()\n\n\n\n\nGreat - we can see that the pattern we saw earlier is clear - as time increases up the y-axis, the share of bars receiving reviews below three decreases.\nNext we can add in a colour scale for the fill:\n\ndf %>% \n  ggplot(aes(rating, y = factor(review_date), fill = review_date)) +\n  geom_density_ridges() +\n  scale_fill_viridis_c(option = \"magma\")\n\n\n\n\nThe viridis colour scales are nice for two reasons - they’re discernible to people with most forms of colour blindness and print well if you only use black and white. The magma option gives a nice fade from purple to yellow.\nNext we can move the colourbar in the legend to the bottom and increase it in size, and add some labels.\n\ndf %>%\n  ggplot(aes(rating, y = factor(review_date), fill = review_date)) +\n  geom_density_ridges() +\n  scale_fill_viridis_c(option = \"magma\") +\n  theme(legend.position = \"bottom\") +\n  guides(fill = guide_colorbar(\n    title.position = \"bottom\",\n    barwidth = 25,\n    title.hjust = .5\n  )) +\n    labs(y = NULL,\n         x = \"Chocolate bar rating\",\n         fill = \"Date of review\")\n\n\n\n\nWhat can we learn about the number of ingredients and cocoa percentage?\nSelecting the ingredients column, we see that it has the number of ingredients and each ingredient listed after a dash and separated by commas.\n\ndf %>% \n  select(ingredients)\n\n# A tibble: 2,530 x 1\n   ingredients\n   <chr>      \n 1 3- B,S,C   \n 2 3- B,S,C   \n 3 3- B,S,C   \n 4 3- B,S,C   \n 5 3- B,S,C   \n 6 3- B,S,C   \n 7 3- B,S,C   \n 8 4- B,S,C,L \n 9 4- B,S,C,L \n10 4- B,S,C,L \n# ... with 2,520 more rows\n\n\nThe chocolate bar ingredients are:\n\nstr <- \"B = Beans, S = Sugar, S* = Sweetener other than white cane or beet sugar, C = Cocoa Butter, V = Vanilla, L = Lecithin, Sa = Salt\"\n\nstr <- str %>% \n  as_tibble() %>% \n  separate_rows(value, sep = \",\") %>% \n  separate(value, c(\"key\", \"value\"), \"=\") %>% \n  mutate(across(c(key, value), str_squish))\n\nknitr::kable(str)\n\n\n\nkey\nvalue\n\n\n\nB\nBeans\n\n\nS\nSugar\n\n\nS*\nSweetener other than white cane or beet sugar\n\n\nC\nCocoa Butter\n\n\nV\nVanilla\n\n\nL\nLecithin\n\n\nSa\nSalt\n\n\n\n\n\n\ndf <- df %>% \n  mutate(ingredients = str_replace_all(ingredients, c(\"Sa\" = \"salt\",\n                                                      # the * is a special character \n                                                      # when writing Regex and so \n                                                      # we use the two backslashes to \n                                                      # \"escape\" the meaning\n                                                      \"S\\\\*\" = \"non_sugar_sweetener\",\n                                                      \"B\" = \"beans\",\n                                                      \"S\" =  \"sugar\",\n                                                      \"V\" = \"vanilla\",\n                                                      \"L\" = \"lecithin\",\n                                                      \"C\" = \"cocoa_butter\"\n                                                      )))\n\nWe can use the separate function from dplyr to split the ingredients column into two columns, based on the dash which splits the two components.\nThe separate function takes three inputs: 1. the column which you want to split, 2. a character vector of new column names, and 3. finally the regex which separates the columns.\n\ndf %>% \n  separate(ingredients, \n           into = c(\"n_ingredients\", \"ingredients\"), \n           sep = \"-\") %>% \n  select(n_ingredients, ingredients) %>%\n  mutate(n_ingredients = parse_number(n_ingredients))\n\n# A tibble: 2,530 x 2\n   n_ingredients ingredients                         \n           <dbl> <chr>                               \n 1             3 \" beans,sugar,cocoa_butter\"         \n 2             3 \" beans,sugar,cocoa_butter\"         \n 3             3 \" beans,sugar,cocoa_butter\"         \n 4             3 \" beans,sugar,cocoa_butter\"         \n 5             3 \" beans,sugar,cocoa_butter\"         \n 6             3 \" beans,sugar,cocoa_butter\"         \n 7             3 \" beans,sugar,cocoa_butter\"         \n 8             4 \" beans,sugar,cocoa_butter,lecithin\"\n 9             4 \" beans,sugar,cocoa_butter,lecithin\"\n10             4 \" beans,sugar,cocoa_butter,lecithin\"\n# ... with 2,520 more rows\n\n\nWith the number of ingredients in it’s own column now we can ask what share of the chocolate bars\n\n# jpeg(filename = \"figures/Chocolate_bar_ratings.jpeg\",\n#      height = 6,\n#      width = 8,\n#      units = \"in\",\n#      res = 1000)\n\ndf %>% \n  separate(ingredients, into = c(\"n_ingredients\", \"ingredients\"), sep = \"-\") %>% \n  mutate(across(c(n_ingredients, cocoa_percent), parse_number),\n         cocoa_percent = cocoa_percent - cocoa_percent %% 5) %>% \n  count(cocoa_percent, n_ingredients) %>% \n  ggplot(aes(cocoa_percent, n_ingredients, fill = n)) +\n  geom_tile() +\n  scale_fill_viridis_c() +\n  scale_x_continuous(labels = scales::percent_format(scale = 1)) +\n  labs(x = \"Cocoa percent\",\n       y = \"Number of ingredients\",\n       fill = \"Number of bars\")\n\n\n\n# dev.off()\n\nWhat is the correlation between ingredients that are used together?\n\ndf <- df %>%\n  separate(ingredients, into = c(\"n_ingredients\", \"ingredients\"), sep = \"-\") %>%\n  separate_rows(ingredients, sep = \",\") %>%\n  filter(!is.na(ingredients)) %>%\n  pivot_wider(names_from = ingredients, values_from = ingredients) %>%\n  mutate(across(beans:non_sugar_sweetener, ~ ifelse(is.na(.), 0, 1)))\n\nWhat do we know about the countries of origin?\n\ndf %>% \n  add_count(country_of_bean_origin) %>%\n  # only include countries with more than 60 bars\n  filter(n > 60) %>% \n  group_by(country_of_bean_origin) %>% \n  summarise(mean_rating = mean(rating)) %>% \n  mutate(country_of_bean_origin = fct_reorder(country_of_bean_origin, mean_rating)) %>% \n  ggplot(aes(mean_rating, country_of_bean_origin)) +\n  geom_col(fill = \"midnightblue\", alpha = .8) +\n  # ensure that x-axis looks appropriate.\n  coord_cartesian(xlim = c(3,3.3)) +\n    labs(x = \"Average rating for countries of origin with more than 60 bars reviewed\",\n         y = NULL)\n\n\n\n\nWhat are some fun variables??\n\ndf %>% \n  select(most_memorable_characteristics, rating) %>% \n  separate_rows(most_memorable_characteristics, sep = \",\") %>% \n  mutate(across(most_memorable_characteristics, str_squish)) %>% \n  add_count(most_memorable_characteristics) %>% \n  filter(n > 15) %>% \n  group_by(most_memorable_characteristics) %>% \n  summarise(mean_rating = mean(rating)) %>% \n  ungroup() %>% \n  arrange(mean_rating) %>% \n  slice(1:10, 69:78)\n\n# A tibble: 20 x 2\n   most_memorable_characteristics mean_rating\n   <chr>                                <dbl>\n 1 chemical                              2.5 \n 2 medicinal                             2.55\n 3 off notes                             2.58\n 4 burnt                                 2.72\n 5 rubber                                2.73\n 6 pungent                               2.73\n 7 metallic                              2.78\n 8 off                                   2.78\n 9 bitter                                2.79\n10 rubbery                               2.83\n11 cocoa                                 3.39\n12 melon                                 3.40\n13 nuts                                  3.40\n14 raisins                               3.41\n15 honey                                 3.42\n16 dried fruit                           3.44\n17 rich cocoa                            3.44\n18 orange                                3.45\n19 rich                                  3.46\n20 strawberry                            3.46\n\n\nWord model\n\ndf_characteristics <- df %>% \n  select(c(most_memorable_characteristics, rating)) %>% \n  separate_rows(most_memorable_characteristics, sep = \",\") %>% \n  mutate(most_memorable_characteristics = str_squish(most_memorable_characteristics))\n\ndf_characteristics %>% \n  count(most_memorable_characteristics, sort = T)\n\n# A tibble: 948 x 2\n   most_memorable_characteristics     n\n   <chr>                          <int>\n 1 sweet                            260\n 2 nutty                            256\n 3 cocoa                            242\n 4 roasty                           212\n 5 creamy                           187\n 6 earthy                           181\n 7 sandy                            164\n 8 fatty                            161\n 9 floral                           141\n10 intense                          139\n# ... with 938 more rows\n\n\n\ndf_characteristics %>% \n  group_by(most_memorable_characteristics) %>% \n  add_count() %>% \n  filter(n > 3) %>% \n  mutate(avg_rating = mean(rating)) %>% \n  ungroup() %>% \n  distinct(most_memorable_characteristics, avg_rating) %>% \n  slice_max(avg_rating, n = 12, with_ties = F) %>% \n    mutate(avg_rating = round(avg_rating, 2)) %>% \n    knitr::kable(col.names = c(\"Most memorable characteristics\", \"Average rating\"))\n\n\n\nMost memorable characteristics\nAverage rating\n\n\n\npeanut\n3.75\n\n\nwine\n3.75\n\n\nbalanced\n3.73\n\n\nraspberry\n3.70\n\n\nmild tart\n3.69\n\n\nrobust\n3.69\n\n\nrich choco\n3.69\n\n\nlong lasting\n3.62\n\n\nblackberry\n3.61\n\n\ndark berry\n3.61\n\n\nsubtle\n3.61\n\n\ndelicate\n3.60\n\n\n\n\n\n\nlibrary(tidymodels)\nlibrary(textrecipes)\n\ndf_characteristics_folds <- vfold_cv(df_characteristics)\n\nglmnet_recipe <- \n  recipe(formula = rating ~ ., data = df_characteristics) %>% \n  step_tokenize(most_memorable_characteristics) %>% \n  step_tokenfilter(most_memorable_characteristics, max_tokens = 100) %>% \n  step_tf(most_memorable_characteristics) %>% \n  step_normalize(all_predictors(), -all_nominal())\n\nglmnet_recipe %>% prep() %>% juice()\n\n# A tibble: 6,839 x 101\n   rating tf_most_memorable_~ tf_most_memorab~ tf_most_memorab~ tf_most_memorab~\n    <dbl>               <dbl>            <dbl>            <dbl>            <dbl>\n 1   3.25             -0.0767          -0.0630          -0.0805          -0.0528\n 2   3.25             -0.0767          -0.0630          -0.0805          -0.0528\n 3   3.25             -0.0767          -0.0630          -0.0805          -0.0528\n 4   3.5              -0.0767          -0.0630          -0.0805          -0.0528\n 5   3.5              -0.0767          -0.0630          -0.0805          -0.0528\n 6   3.5              -0.0767          -0.0630          -0.0805          -0.0528\n 7   3.75             -0.0767          -0.0630          -0.0805          -0.0528\n 8   3.75             -0.0767          -0.0630          -0.0805          -0.0528\n 9   3.75             -0.0767          -0.0630          -0.0805          -0.0528\n10   3                -0.0767          -0.0630          -0.0805          -0.0528\n# ... with 6,829 more rows, and 96 more variables:\n#   tf_most_memorable_characteristics_banana <dbl>,\n#   tf_most_memorable_characteristics_base <dbl>,\n#   tf_most_memorable_characteristics_basic <dbl>,\n#   tf_most_memorable_characteristics_berry <dbl>,\n#   tf_most_memorable_characteristics_bitter <dbl>,\n#   tf_most_memorable_characteristics_black <dbl>, ...\n\n\n\nglmnet_spec <- \n  linear_reg(penalty = tune(), mixture = 1) %>% \n  set_mode(\"regression\") %>% \n  set_engine(\"glmnet\") \n\nglmnet_workflow <- \n  workflow() %>% \n  add_recipe(glmnet_recipe) %>% \n  add_model(glmnet_spec) \n\nglmnet_grid <- tidyr::crossing(penalty = 10^seq(-6, -1, length.out = 20)) \n\nglmnet_tune <- \n  tune_grid(glmnet_workflow, df_characteristics_folds, grid = glmnet_grid)\n\nglmnet_tune %>% \n  autoplot()\n\n\n\n\n\nglmnet_model_final <- finalize_workflow(glmnet_workflow, glmnet_tune %>% \n  select_best())\n\nfinal_fit <- glmnet_model_final %>% \n  fit(df_characteristics)\n\n\nfinal_fit %>%\n  extract_fit_parsnip() %>%\n  tidy() %>%\n  filter(term != \"(Intercept)\") %>%\n  mutate(term = str_remove(term, \"tf_most_memorable_characteristics_\")) %>%\n  mutate(sign = estimate > 0) %>%\n  group_by(sign) %>%\n  mutate(estimate = abs(estimate)) %>% \n  slice_max(estimate, n = 12) %>%\n  ungroup() %>%\n  mutate(estimate = ifelse(sign == TRUE, estimate, -estimate)) %>% \n  mutate(term = fct_reorder(term, estimate)) %>%\n  ggplot(aes(estimate, term, fill = sign)) +\n  geom_col(show.legend = F) +\n  geom_vline(xintercept = 0, lty = 2) +\n  scale_fill_brewer(palette = \"Paired\") +\n  labs(x = \"Effect of term on chocolate bar score\",\n       y = \"Memorable characteristic\")\n\n\n\n\nRegression examples\n\ndf %>% \n  select(rating)\n\n# A tibble: 2,443 x 1\n   rating\n    <dbl>\n 1   3.25\n 2   3.5 \n 3   3.75\n 4   3   \n 5   3   \n 6   3.25\n 7   3.5 \n 8   3.5 \n 9   3.75\n10   2.75\n# ... with 2,433 more rows\n\nlm(data = df %>% mutate(cocoa_percent = parse_number(cocoa_percent)), rating ~ cocoa_percent) %>%\n  tidy()\n\n# A tibble: 2 x 5\n  term          estimate std.error statistic   p.value\n  <chr>            <dbl>     <dbl>     <dbl>     <dbl>\n1 (Intercept)    3.67      0.120       30.5  1.15e-173\n2 cocoa_percent -0.00641   0.00168     -3.82 1.34e-  4"
  },
  {
    "objectID": "code/Gender_equality_index.html",
    "href": "code/Gender_equality_index.html",
    "title": "Gender Equality Index in the EU",
    "section": "",
    "text": "Show a workflow in creating an interactive figure and highlight some data munging tips.\nFocus is on:\n\nGetting data from excel into R with some nice functions etc.\nInteractive charts\nData viz\n\nData from landing page and you can download the excel sheet here.\nThere are more than 140 indicators that fall into 6 domains and 14 sub-domains.\n\nThe data comes in a common format – there is an excel workbook with a readme sheet, then a metadata sheet describing the different variables, then a sheet for the years 2010, 2012, 2015, 2017, 2018 and 2019.\nWe can make a simple plot of the index changes over time, in relative terms and in absolute terms.\n\n\n\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.6      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nlibrary(here)\n\nhere() starts at C:/Users/User/Documents/Recon/screencasts\n\ntheme_set(theme_light())\ndf <- readxl::read_excel(here(\"data/Gender-equality-index.xlsx\"))\n\ndf %>% \n  knitr::kable()\n\n\n\n\nThis excel file is meant to provide users the data needed to calculate the Gender Equality Index\n\n\n\nUsers must use the data provided in these sheets (one per year), to derive the scores of the Gender Equality Index, by applying the methodology for calculation\n\n\nGender Equality Index 2017: Methodological Report | European Institute for Gender Equality (europa.eu)\n\n\n- Users might find in Index Interface different data for some indicators\n\n\n- In the Index Interface, EIGE is presenting some of them in a different way\n\n\n- For instance, the indicator on povery (indicator 8), is considered for calculation as NOT-AT-RISK of POVERTY rate, while in the Index interface, the figures are referred to AT-RISK of POVERTY rate\n\n\n- The same for the indicators on access to health care, displayed as UNMET NEEDS in the Index interface, and used in a reversed way for calculation.\n\n\n- As for the indicator of the domain of power, the methodology envisages to use the 3-years average, and the figures in the excel are provided accordingly. In the Index interface, the most updated data (quarterly, biannual, year) are displayed instead.\n\n\n- The Index Inteface provides the information in the notes and metadata for each indicator\n\n\n\n\n\n\nThe problem is that this is written in a silly way - it’s readable to humans but not to computers\n\n# df <- readxl::read_excel(here(\"data/Gender-equality-index.xlsx\"), sheet = 2, range = )\n\n\nWhat we want to do is take the wide dataset from the year tabs and then make them long so that we can collect them together and draw some functions over time.\nI should make a graphic of how we go from colours having meaning to columns containing this kind of information. Like a panel on the left where we have a screenshot of the excel sheet - then an arrow - then on the right we have a nice simple grouped dataset on the right.\n\nsheets <- tibble(\n  sheet = 3:8,\n  year = c(2010, 2012, 2015, 2017, 2018, 2019)\n)\n\nget_data <- function(sh) {\n  message(\"Getting data from \", sh)\n\n  df <- readxl::read_excel(here(\"data/Gender-equality-index.xlsx\"), sheet = sh)\n\n  df <- df %>%\n    janitor::clean_names() %>%\n    pivot_longer(-c(index_year:gender_equality_index))\n\n  df\n}\n\nsheets <- sheets %>%\n  mutate(data = map(sheet, possibly(get_data, \"failed\")))\n\ndf <- sheets %>%\n  unnest(data)\n\n\n\nWe might want to get the English names of a country\n\ndf %>% \n  count(country)\n\nWe can use the countrycode package:\n\nlibrary(countrycode)\n\ncountries <- df %>% \n  distinct(country)\n\ncountries <- countries %>% \n  mutate(country_name = countrycode(country, \"iso2c\", \"country.name\")) %>% \n  mutate(country_name = case_when(\n    country == \"EU\" ~ \"European Union\",\n    country == \"EL\" ~ \"Greece\",\n    TRUE ~ country_name\n    \n    \n  ))\n\ndf <- df %>% \n  inner_join(countries)\n\n\nData from Eurostat:\n\nThe indicator is calculated as the ratio of real GDP to the average population of a specific year. GDP measures the value of total final output of goods and services produced by an economy within a certain period of time. It includes goods and services that have markets (or which could have markets) and products which are produced by general government and non-profit institutions. It is a measure of economic activity and is also used as a proxy for the development in a country’s material living standards. However, it is a limited measure of economic welfare. For example, neither does GDP include most unpaid household work nor does GDP take account of negative effects of economic activity, like environmental degradation.\n\n\ngdp_pc <- readxl::read_excel(here(\"data/Gender-equality-index_augment_with_gdp_pc.xlsx\"), sheet = 3, range = \"A9:AS49\")\n\nNew names:\n• `` -> `...3`\n• `` -> `...5`\n• `` -> `...7`\n• `` -> `...9`\n• `` -> `...11`\n• `` -> `...13`\n• `` -> `...15`\n• `` -> `...17`\n• `` -> `...19`\n• `` -> `...21`\n• `` -> `...23`\n• `` -> `...25`\n• `` -> `...27`\n• `` -> `...29`\n• `` -> `...31`\n• `` -> `...33`\n• `` -> `...35`\n• `` -> `...37`\n• `` -> `...39`\n• `` -> `...41`\n• `` -> `...43`\n• `` -> `...45`\n\ncols <- 2*1:22\n\ngdp_pc <- gdp_pc %>% \n  select(1, cols) %>% \n  mutate(across(-TIME, as.numeric)) %>% \n  pivot_longer(-TIME) %>% \n  rename(country_name = TIME) %>% \n  filter(country_name != \"GEO (Labels)\") %>% \n  mutate(name = parse_number(name)) %>% \n  rename(year = name)\n\nWarning: Using an external vector in selections was deprecated in tidyselect 1.1.0.\nℹ Please use `all_of()` or `any_of()` instead.\n  # Was:\n  data %>% select(cols)\n\n  # Now:\n  data %>% select(all_of(cols))\n\nSee <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.\n\n\nWarning in mask$eval_all_mutate(quo): NAs introduced by coercion\n\nWarning in mask$eval_all_mutate(quo): NAs introduced by coercion\n\nWarning in mask$eval_all_mutate(quo): NAs introduced by coercion\n\nWarning in mask$eval_all_mutate(quo): NAs introduced by coercion\n\nWarning in mask$eval_all_mutate(quo): NAs introduced by coercion\n\nWarning in mask$eval_all_mutate(quo): NAs introduced by coercion\n\nWarning in mask$eval_all_mutate(quo): NAs introduced by coercion\n\nWarning in mask$eval_all_mutate(quo): NAs introduced by coercion\n\nWarning in mask$eval_all_mutate(quo): NAs introduced by coercion\n\n\nInteractive\n\nlibrary(ggiraph)\n\nf <- gdp_pc %>%\n  mutate(\n    value_chr = scales::dollar(value),\n    tooltip = paste0(country_name, \"\\n\", value_chr, \"\\n\", year)\n  ) %>%\n  ggplot(aes(x = year, y = value, \n             colour = country_name,\n             group = country_name)) +\n  geom_point_interactive(aes(tooltip = tooltip), cex = 2) +\n  geom_line_interactive() +\n  scale_y_continuous(labels = scales::dollar_format()) +\n  theme(legend.position = \"none\") +\n  labs(\n    x = NULL,\n    y = \"GDP per capita \",\n    caption = \"Data from Eurostat\"\n  )\n\nggiraph(ggobj = f) %>%\n  girafe_options(\n    opts_hover(css = girafe_css(\n      css = \"fill:none;stroke:red;r:5pt;\",\n      point = \"fill:black;stroke:none;\"\n    )),\n    opts_hover_inv(css = girafe_css(\n      css = \"fill:none;stroke:gray;opacity:.9\",\n      text = \"fill:gray;stroke:none;opacity:.9\"\n    ))\n  )\n\nWarning: Removed 18 rows containing missing values (geom_interactive_point).\n\n\nWarning: Removed 18 row(s) containing missing values (geom_path).\n\n\n\n\n\n\n\n\ndf <- read_rds(here(\"data/Gender-equality-index.rds\"))\n\n\ndf %>% \n  ggplot(aes(index_year, gender_equality_index, colour = country_name)) +\n  geom_line()\n\n\n\n\nHow can we make the countries more clear?\ngghighlight\n\ncountries_highlight <- df %>% \n  distinct(country_name) %>% \n  sample_n(6) %>% \n  pull()\n\ndf %>%\n  mutate(flag = case_when(\n    country_name %in% countries_highlight ~ 1,\n    TRUE ~ 0\n  )) %>%\n  ggplot(aes(index_year, gender_equality_index, colour = country_name)) +\n  geom_line(size = 3) +\n  gghighlight::gghighlight(flag == 1) +\n  scale_x_continuous(labels = scales::number_format(accuracy = 1, big.mark = \"\")) +\n  scale_y_continuous(labels = scales::percent_format(scale = 1))\n\nWarning: Tried to calculate with group_by(), but the calculation failed.\nFalling back to ungrouped filter operation...\n\n\nlabel_key: country_name\n\n\n\n\n\nRecreate a nice ranking change?\n\ndf_rank <- df %>%\n  select(reference_year_main, country_name, gender_equality_index) %>%\n  distinct()\n\ndf_rank <- df_rank %>%\n  group_by(reference_year_main) %>%\n  mutate(rank = rank(desc(gender_equality_index), ties.method = \"average\")) %>%\n  ungroup() %>%\n  rename(year = reference_year_main)\n\ndf_rank %>%\n  ggplot(aes(year, rank, color = country_name)) +\n  geom_line(size = 3)\n\n\n\n\nWhat elements do we need?\n\nLabels on left and right that include rank and country name\nColour scale that goes from blue to red based on ranking at end of period\nInteractivity with ggiraph probably.\n\nIs there a better way to do this?\n\nlabels_left <- df_rank %>% \n  filter(year == min(year)) %>% \n  mutate(left_rank = rank) %>% \n  select(country_name, left_rank)\n\nlabels_right <- df_rank %>% \n  filter(year == max(year)) %>% \n  mutate(right_rank = rank) %>% \n  select(country_name, right_rank)\n\ndf_rank <- df_rank %>% \n  inner_join(labels_left) %>% \n  inner_join(labels_right)\n\nJoining, by = \"country_name\"\nJoining, by = \"country_name\"\n\n\n\ndf_rank %>%\n  ggplot(aes(year, rank, color = right_rank, group = country_name)) +\n  geom_line(size = 2.8, aes(year, rank, group = country_name), colour = \"black\") +\n  geom_line(size = 2) +\n  geom_text(aes(\n    x = 2010, y = left_rank,\n    label = paste0(left_rank, \". \", country_name)\n  ),\n  colour = \"black\",\n  hjust = 1.1,\n  cex = 3\n  ) +\n  geom_text(aes(\n    x = 2019, y = right_rank,\n    label = paste0(right_rank, \". \", country_name)\n  ),\n  colour = \"black\",\n  hjust = 0,\n  cex = 3\n  ) +\n  scale_y_reverse() +\n  scale_color_gradient2(\n    low = \"blue\", high = \"red\",\n    mid = \"pink\",\n    midpoint = 12\n  ) +\n  scale_x_continuous(breaks = c(2010, 2012, 2015, 2017, 2018, 2019)) +\n  coord_cartesian(xlim = c(2009, 2020)) +\n  theme(\n    legend.position = \"none\",\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.text.y = element_blank()\n  ) +\n  labs(\n    x = NULL,\n    y = NULL\n  ) \n\n\n\n\nInteractivity\n\nlibrary(ggiraph)\n\ng <- df_rank %>%\n  ggplot(aes(year, rank, color = right_rank, group = country_name, tooltip = country_name)) +\n  geom_line(size = 2.8, aes(year, rank, group = country_name), colour = \"black\") +\n  geom_line_interactive(size = 2, aes(data_id = country_name)) +\n  geom_text_interactive(aes(\n    x = 2010, y = left_rank,\n    label = paste0(left_rank, \". \", country_name),\n    data_id = country_name\n  ),\n  colour = \"black\", hjust = 1.1, cex = 3\n  ) +\n  geom_text_interactive(aes(\n    x = 2019, y = right_rank,\n    label = paste0(right_rank, \". \", country_name),\n    data_id = country_name\n  ),\n  colour = \"black\", hjust = 0, cex = 3\n  ) +\n  scale_y_reverse() +\n  scale_color_gradient2(\n    low = \"blue\", high = \"red\", mid = \"pink\",\n    midpoint = 14\n  ) +\n  scale_x_continuous(breaks = c(2010, 2012, 2015, 2017, 2018, 2019)) +\n  coord_cartesian(xlim = c(2008, 2021)) +\n  theme(\n    legend.position = \"none\",\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.text.y = element_blank()\n  ) +\n  labs(\n    x = NULL,\n    y = NULL\n  )\n\n\nggiraph(ggobj = g) %>%\n  girafe_options(\n    opts_hover(css = girafe_css(\n      css = \"fill:none;stroke:red;r:5pt;\",\n      text = \"fill:black;stroke:none;\"\n    )),\n    opts_hover_inv(css = girafe_css(\n      css = \"fill:none;stroke:gray;opacity:.9\",\n      text = \"fill:gray;stroke:none;opacity:.9\"\n    ))\n  )\n\n\n\n\n\nYay! It works! Have a look at Hungary falling right to the bottom.\nGreat. I hope that was useful."
  },
  {
    "objectID": "slides/slide-template.html#purpose",
    "href": "slides/slide-template.html#purpose",
    "title": "R Screencasts",
    "section": "Purpose",
    "text": "Purpose\nShow a workflow in creating an interactive figure and highlight some data munging tips.\nFocus is on:\n\nGetting data from excel into R with some nice functions etc.\nInteractive charts\nData viz\n\n\nlibrary(ggplot2)\nggplot(airquality, aes(Temp, Ozone)) + \n  geom_point() + \n  geom_smooth(method = \"loess\")"
  },
  {
    "objectID": "slides/slide-template.html#intro",
    "href": "slides/slide-template.html#intro",
    "title": "R Screencasts",
    "section": "Intro",
    "text": "Intro\nData from landing page and you can download the excel sheet here.\nThere are more than 140 indicators that fall into 6 domains and 14 sub-domains."
  },
  {
    "objectID": "slides/slide-template.html#description-of-data-ingestion",
    "href": "slides/slide-template.html#description-of-data-ingestion",
    "title": "R Screencasts",
    "section": "Description of data ingestion",
    "text": "Description of data ingestion\nThe data comes in a common format – there is an excel workbook with a readme sheet, then a metadata sheet describing the different variables, then a sheet for the years 2010, 2012, 2015, 2017, 2018 and 2019.\nWe can make a simple plot of the index changes over time, in relative terms and in absolute terms."
  },
  {
    "objectID": "slides/slide-template.html#ingest",
    "href": "slides/slide-template.html#ingest",
    "title": "Slide template",
    "section": "Ingest",
    "text": "Ingest\nReadme sheet\n\nlibrary(tidyverse)\nlibrary(here)\ntheme_set(theme_light())\ndf <- readxl::read_excel(here(\"data/Gender-equality-index.xlsx\"))\n\ndf %>% \n  knitr::kable()\n\n\nCodebook\nThe problem is that this is written in a silly way - it’s readable to humans but not to computers\n\n\n\nData read in process\nWhat we want to do is take the wide dataset from the year tabs and then make them long so that we can collect them together and draw some functions over time.\nI should make a graphic of how we go from colours having meaning to columns containing this kind of information. Like a panel on the left where we have a screenshot of the excel sheet - then an arrow - then on the right we have a nice simple grouped dataset on the right."
  },
  {
    "objectID": "slides/slide-template.html#ingest-output",
    "href": "slides/slide-template.html#ingest-output",
    "title": "Slide template",
    "section": "Ingest",
    "text": "Ingest\n\n\n\n\n\n\n\nThis excel file is meant to provide users the data needed to calculate the Gender Equality Index\n\n\n\n\nUsers must use the data provided in these sheets (one per year), to derive the scores of the Gender Equality Index, by applying the methodology for calculation\n\n\nGender Equality Index 2017: Methodological Report | European Institute for Gender Equality (europa.eu)\n\n\n- Users might find in Index Interface different data for some indicators\n\n\n- In the Index Interface, EIGE is presenting some of them in a different way\n\n\n- For instance, the indicator on povery (indicator 8), is considered for calculation as NOT-AT-RISK of POVERTY rate, while in the Index interface, the figures are referred to AT-RISK of POVERTY rate\n\n\n- The same for the indicators on access to health care, displayed as UNMET NEEDS in the Index interface, and used in a reversed way for calculation.\n\n\n- As for the indicator of the domain of power, the methodology envisages to use the 3-years average, and the figures in the excel are provided accordingly. In the Index interface, the most updated data (quarterly, biannual, year) are displayed instead.\n\n\n- The Index Inteface provides the information in the notes and metadata for each indicator"
  },
  {
    "objectID": "slides/slide-template.html#purpose-output",
    "href": "slides/slide-template.html#purpose-output",
    "title": "R Screencasts",
    "section": "Purpose",
    "text": "Purpose"
  },
  {
    "objectID": "slides/slide-template.html#readme-sheet",
    "href": "slides/slide-template.html#readme-sheet",
    "title": "R Screencasts",
    "section": "Readme sheet",
    "text": "Readme sheet\n\nlibrary(tidyverse)\nlibrary(here)\ntheme_set(theme_light())\ndf <- readxl::read_excel(here(\"data/Gender-equality-index.xlsx\"))\n\ndf %>% \n  knitr::kable()"
  },
  {
    "objectID": "slides/slide-template.html#readme-sheet-output",
    "href": "slides/slide-template.html#readme-sheet-output",
    "title": "R Screencasts",
    "section": "Readme sheet",
    "text": "Readme sheet\n\n\n\n\n\n\n\nThis excel file is meant to provide users the data needed to calculate the Gender Equality Index\n\n\n\n\nUsers must use the data provided in these sheets (one per year), to derive the scores of the Gender Equality Index, by applying the methodology for calculation\n\n\nGender Equality Index 2017: Methodological Report | European Institute for Gender Equality (europa.eu)\n\n\n- Users might find in Index Interface different data for some indicators\n\n\n- In the Index Interface, EIGE is presenting some of them in a different way\n\n\n- For instance, the indicator on povery (indicator 8), is considered for calculation as NOT-AT-RISK of POVERTY rate, while in the Index interface, the figures are referred to AT-RISK of POVERTY rate\n\n\n- The same for the indicators on access to health care, displayed as UNMET NEEDS in the Index interface, and used in a reversed way for calculation.\n\n\n- As for the indicator of the domain of power, the methodology envisages to use the 3-years average, and the figures in the excel are provided accordingly. In the Index interface, the most updated data (quarterly, biannual, year) are displayed instead.\n\n\n- The Index Inteface provides the information in the notes and metadata for each indicator"
  },
  {
    "objectID": "slides/slide-template.html#codebook",
    "href": "slides/slide-template.html#codebook",
    "title": "R Screencasts",
    "section": "Codebook",
    "text": "Codebook\nThe problem is that this is written in a silly way - it’s readable to humans but not to computers"
  },
  {
    "objectID": "slides/slide-template.html#data-read-in-process",
    "href": "slides/slide-template.html#data-read-in-process",
    "title": "R Screencasts",
    "section": "Data read in process",
    "text": "Data read in process\nWhat we want to do is take the wide dataset from the year tabs and then make them long so that we can collect them together and draw some functions over time.\nI should make a graphic of how we go from colours having meaning to columns containing this kind of information. Like a panel on the left where we have a screenshot of the excel sheet - then an arrow - then on the right we have a nice simple grouped dataset on the right."
  },
  {
    "objectID": "slides/Data-wrangling-1.html#elementary-data-manipulations",
    "href": "slides/Data-wrangling-1.html#elementary-data-manipulations",
    "title": "Data wrangling 1",
    "section": "Elementary data manipulations",
    "text": "Elementary data manipulations\n\n\nPick rows: filter()\nPick columns: select()\nSort rows: arrange()\nCount things: count()\nMake new columns: mutate()\n\n\nclass: center, middle"
  },
  {
    "objectID": "slides/Data-wrangling-1.html#the-pipe-feeds-data-into-functions",
    "href": "slides/Data-wrangling-1.html#the-pipe-feeds-data-into-functions",
    "title": "Data wrangling 1",
    "section": "The pipe %>% feeds data into functions",
    "text": "The pipe %>% feeds data into functions\n.tiny-font[\n\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_l…¹ body_…² sex    year\n  <fct>   <fct>              <dbl>         <dbl>       <int>   <int> <fct> <int>\n1 Adelie  Torgersen           39.1          18.7         181    3750 male   2007\n2 Adelie  Torgersen           39.5          17.4         186    3800 fema…  2007\n3 Adelie  Torgersen           40.3          18           195    3250 fema…  2007\n4 Adelie  Torgersen           NA            NA            NA      NA <NA>   2007\n5 Adelie  Torgersen           36.7          19.3         193    3450 fema…  2007\n6 Adelie  Torgersen           39.3          20.6         190    3650 male   2007\n# … with abbreviated variable names ¹​flipper_length_mm, ²​body_mass_g\n\n\n]"
  },
  {
    "objectID": "slides/Data-wrangling-1.html#the-pipe-feeds-data-into-functions-1",
    "href": "slides/Data-wrangling-1.html#the-pipe-feeds-data-into-functions-1",
    "title": "Data wrangling 1",
    "section": "The pipe %>% feeds data into functions",
    "text": "The pipe %>% feeds data into functions\n.tiny-font[\n\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_l…¹ body_…² sex    year\n  <fct>   <fct>              <dbl>         <dbl>       <int>   <int> <fct> <int>\n1 Adelie  Torgersen           39.1          18.7         181    3750 male   2007\n2 Adelie  Torgersen           39.5          17.4         186    3800 fema…  2007\n3 Adelie  Torgersen           40.3          18           195    3250 fema…  2007\n4 Adelie  Torgersen           NA            NA            NA      NA <NA>   2007\n5 Adelie  Torgersen           36.7          19.3         193    3450 fema…  2007\n6 Adelie  Torgersen           39.3          20.6         190    3650 male   2007\n# … with abbreviated variable names ¹​flipper_length_mm, ²​body_mass_g\n\n\n]"
  },
  {
    "objectID": "slides/Data-wrangling-1.html#the-pipe-feeds-data-into-functions-2",
    "href": "slides/Data-wrangling-1.html#the-pipe-feeds-data-into-functions-2",
    "title": "Data wrangling 1",
    "section": "The pipe %>% feeds data into functions",
    "text": "The pipe %>% feeds data into functions\n.tiny-font[\n\n\n\n]\n.center[\n\n]"
  },
  {
    "objectID": "slides/Data-wrangling-1.html#the-pipe-feeds-data-into-functions-3",
    "href": "slides/Data-wrangling-1.html#the-pipe-feeds-data-into-functions-3",
    "title": "Data wrangling 1",
    "section": "The pipe %>% feeds data into functions",
    "text": "The pipe %>% feeds data into functions\n.tiny-font[\n\n\n\n]\n.center[\n\n]"
  },
  {
    "objectID": "slides/Data-wrangling-1.html#since-r-4.1-native-pipe",
    "href": "slides/Data-wrangling-1.html#since-r-4.1-native-pipe",
    "title": "Data wrangling 1",
    "section": "Since R 4.1: Native pipe |>",
    "text": "Since R 4.1: Native pipe |>\n.tiny-font[\n\n\n\n]\n.center[\n\n]"
  },
  {
    "objectID": "slides/Data-wrangling-1.html#which-to-use-native-pipe-or-old-school-pipe",
    "href": "slides/Data-wrangling-1.html#which-to-use-native-pipe-or-old-school-pipe",
    "title": "Data wrangling 1",
    "section": "Which to use? Native pipe or old-school pipe?",
    "text": "Which to use? Native pipe or old-school pipe?\n–\n\n|> is the future. If you can, use it.\n\n–\n\n%>% works on older installations. It’s the safe choice for now.\n\n–\nWe use %>% here because many people still run R 3.x or 4.0."
  },
  {
    "objectID": "slides/Data-wrangling-1.html#pick-rows-from-a-table-filter",
    "href": "slides/Data-wrangling-1.html#pick-rows-from-a-table-filter",
    "title": "Data wrangling 1",
    "section": "Pick rows from a table: filter()",
    "text": "Pick rows from a table: filter()\n\n.center[ <img src = “data-wrangling-1_files/filter.svg”, width = 75%>]"
  },
  {
    "objectID": "slides/Data-wrangling-1.html#filter-out-penguins-of-species-gentoo",
    "href": "slides/Data-wrangling-1.html#filter-out-penguins-of-species-gentoo",
    "title": "Data wrangling 1",
    "section": "Filter out penguins of species Gentoo",
    "text": "Filter out penguins of species Gentoo\n.tiny-font[\n\n\n# A tibble: 124 × 8\n   species island bill_length_mm bill_depth_mm flipper_len…¹ body_…² sex    year\n   <fct>   <fct>           <dbl>         <dbl>         <int>   <int> <fct> <int>\n 1 Gentoo  Biscoe           46.1          13.2           211    4500 fema…  2007\n 2 Gentoo  Biscoe           50            16.3           230    5700 male   2007\n 3 Gentoo  Biscoe           48.7          14.1           210    4450 fema…  2007\n 4 Gentoo  Biscoe           50            15.2           218    5700 male   2007\n 5 Gentoo  Biscoe           47.6          14.5           215    5400 male   2007\n 6 Gentoo  Biscoe           46.5          13.5           210    4550 fema…  2007\n 7 Gentoo  Biscoe           45.4          14.6           211    4800 fema…  2007\n 8 Gentoo  Biscoe           46.7          15.3           219    5200 male   2007\n 9 Gentoo  Biscoe           43.3          13.4           209    4400 fema…  2007\n10 Gentoo  Biscoe           46.8          15.4           215    5150 male   2007\n# … with 114 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g\n\n\n]"
  },
  {
    "objectID": "slides/Data-wrangling-1.html#filter-out-penguins-with-bill-length-50-mm",
    "href": "slides/Data-wrangling-1.html#filter-out-penguins-with-bill-length-50-mm",
    "title": "Data wrangling 1",
    "section": "Filter out penguins with bill length > 50 mm",
    "text": "Filter out penguins with bill length > 50 mm\n.tiny-font[\n\n\n# A tibble: 52 × 8\n   species island bill_length_mm bill_depth_mm flipper_len…¹ body_…² sex    year\n   <fct>   <fct>           <dbl>         <dbl>         <int>   <int> <fct> <int>\n 1 Gentoo  Biscoe           50.2          14.3           218    5700 male   2007\n 2 Gentoo  Biscoe           59.6          17             230    6050 male   2007\n 3 Gentoo  Biscoe           50.5          15.9           222    5550 male   2008\n 4 Gentoo  Biscoe           50.5          15.9           225    5400 male   2008\n 5 Gentoo  Biscoe           50.1          15             225    5000 male   2008\n 6 Gentoo  Biscoe           50.4          15.3           224    5550 male   2008\n 7 Gentoo  Biscoe           54.3          15.7           231    5650 male   2008\n 8 Gentoo  Biscoe           50.7          15             223    5550 male   2008\n 9 Gentoo  Biscoe           51.1          16.3           220    6000 male   2008\n10 Gentoo  Biscoe           52.5          15.6           221    5450 male   2009\n# … with 42 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g\n\n\n]"
  },
  {
    "objectID": "slides/Data-wrangling-1.html#pick-columns-from-a-table-select",
    "href": "slides/Data-wrangling-1.html#pick-columns-from-a-table-select",
    "title": "Data wrangling 1",
    "section": "Pick columns from a table: select()",
    "text": "Pick columns from a table: select()\n\n.center[ <img src = “data-wrangling-1_files/select.svg”, width = 75%>]"
  },
  {
    "objectID": "slides/Data-wrangling-1.html#pick-columns-species-island-and-sex",
    "href": "slides/Data-wrangling-1.html#pick-columns-species-island-and-sex",
    "title": "Data wrangling 1",
    "section": "Pick columns species, island, and sex",
    "text": "Pick columns species, island, and sex\n.tiny-font[\n\n\n# A tibble: 344 × 3\n   species island    sex   \n   <fct>   <fct>     <fct> \n 1 Adelie  Torgersen male  \n 2 Adelie  Torgersen female\n 3 Adelie  Torgersen female\n 4 Adelie  Torgersen <NA>  \n 5 Adelie  Torgersen female\n 6 Adelie  Torgersen male  \n 7 Adelie  Torgersen female\n 8 Adelie  Torgersen male  \n 9 Adelie  Torgersen <NA>  \n10 Adelie  Torgersen <NA>  \n# … with 334 more rows\n\n\n]"
  },
  {
    "objectID": "slides/Data-wrangling-1.html#sort-the-rows-in-a-table-arrange",
    "href": "slides/Data-wrangling-1.html#sort-the-rows-in-a-table-arrange",
    "title": "Data wrangling 1",
    "section": "Sort the rows in a table: arrange()",
    "text": "Sort the rows in a table: arrange()\n\n.center[ <img src = “data-wrangling-1_files/arrange.svg”, width = 75%>]"
  },
  {
    "objectID": "slides/Data-wrangling-1.html#sort-penguins-by-bill-length-ascending",
    "href": "slides/Data-wrangling-1.html#sort-penguins-by-bill-length-ascending",
    "title": "Data wrangling 1",
    "section": "Sort penguins by bill length, ascending",
    "text": "Sort penguins by bill length, ascending\n.tiny-font[\n\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_…¹ body_…² sex    year\n   <fct>   <fct>              <dbl>         <dbl>      <int>   <int> <fct> <int>\n 1 Adelie  Dream               32.1          15.5        188    3050 fema…  2009\n 2 Adelie  Dream               33.1          16.1        178    2900 fema…  2008\n 3 Adelie  Torgersen           33.5          19          190    3600 fema…  2008\n 4 Adelie  Dream               34            17.1        185    3400 fema…  2008\n 5 Adelie  Torgersen           34.1          18.1        193    3475 <NA>   2007\n 6 Adelie  Torgersen           34.4          18.4        184    3325 fema…  2007\n 7 Adelie  Biscoe              34.5          18.1        187    2900 fema…  2008\n 8 Adelie  Torgersen           34.6          21.1        198    4400 male   2007\n 9 Adelie  Torgersen           34.6          17.2        189    3200 fema…  2008\n10 Adelie  Biscoe              35            17.9        190    3450 fema…  2008\n# … with 334 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g\n\n\n]"
  },
  {
    "objectID": "slides/Data-wrangling-1.html#sort-penguins-by-bill-length-descending",
    "href": "slides/Data-wrangling-1.html#sort-penguins-by-bill-length-descending",
    "title": "Data wrangling 1",
    "section": "Sort penguins by bill length, descending",
    "text": "Sort penguins by bill length, descending\n.tiny-font[\n\n\n# A tibble: 344 × 8\n   species   island bill_length_mm bill_depth_mm flipper_l…¹ body_…² sex    year\n   <fct>     <fct>           <dbl>         <dbl>       <int>   <int> <fct> <int>\n 1 Gentoo    Biscoe           59.6          17           230    6050 male   2007\n 2 Chinstrap Dream            58            17.8         181    3700 fema…  2007\n 3 Gentoo    Biscoe           55.9          17           228    5600 male   2009\n 4 Chinstrap Dream            55.8          19.8         207    4000 male   2009\n 5 Gentoo    Biscoe           55.1          16           230    5850 male   2009\n 6 Gentoo    Biscoe           54.3          15.7         231    5650 male   2008\n 7 Chinstrap Dream            54.2          20.8         201    4300 male   2008\n 8 Chinstrap Dream            53.5          19.9         205    4500 male   2008\n 9 Gentoo    Biscoe           53.4          15.8         219    5500 male   2009\n10 Chinstrap Dream            52.8          20           205    4550 male   2008\n# … with 334 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g\n\n\n]"
  },
  {
    "objectID": "slides/Data-wrangling-1.html#count-things",
    "href": "slides/Data-wrangling-1.html#count-things",
    "title": "Data wrangling 1",
    "section": "Count things",
    "text": "Count things\n.tiny-font[\n\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_…¹ body_…² sex    year\n   <fct>   <fct>              <dbl>         <dbl>      <int>   <int> <fct> <int>\n 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007\n 2 Adelie  Torgersen           39.5          17.4        186    3800 fema…  2007\n 3 Adelie  Torgersen           40.3          18          195    3250 fema…  2007\n 4 Adelie  Torgersen           NA            NA           NA      NA <NA>   2007\n 5 Adelie  Torgersen           36.7          19.3        193    3450 fema…  2007\n 6 Adelie  Torgersen           39.3          20.6        190    3650 male   2007\n 7 Adelie  Torgersen           38.9          17.8        181    3625 fema…  2007\n 8 Adelie  Torgersen           39.2          19.6        195    4675 male   2007\n 9 Adelie  Torgersen           34.1          18.1        193    3475 <NA>   2007\n10 Adelie  Torgersen           42            20.2        190    4250 <NA>   2007\n# … with 334 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g\n\n\n]"
  },
  {
    "objectID": "slides/Data-wrangling-1.html#count-things-1",
    "href": "slides/Data-wrangling-1.html#count-things-1",
    "title": "Data wrangling 1",
    "section": "Count things",
    "text": "Count things\n.tiny-font[\n\n\n\n\n\n# A tibble: 3 × 2\n  species       n\n  <fct>     <int>\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n\n\n]"
  },
  {
    "objectID": "slides/Data-wrangling-1.html#count-things-2",
    "href": "slides/Data-wrangling-1.html#count-things-2",
    "title": "Data wrangling 1",
    "section": "Count things",
    "text": "Count things\n.tiny-font[\n\n\n# A tibble: 5 × 3\n  species   island        n\n  <fct>     <fct>     <int>\n1 Adelie    Biscoe       44\n2 Adelie    Dream        56\n3 Adelie    Torgersen    52\n4 Chinstrap Dream        68\n5 Gentoo    Biscoe      124\n\n\n]"
  },
  {
    "objectID": "slides/Data-wrangling-1.html#use-the-pipe-to-build-analysis-pipelines",
    "href": "slides/Data-wrangling-1.html#use-the-pipe-to-build-analysis-pipelines",
    "title": "Data wrangling 1",
    "section": "Use the pipe to build analysis pipelines",
    "text": "Use the pipe to build analysis pipelines\n.tiny-font[\n\n\n# A tibble: 152 × 8\n   species island    bill_length_mm bill_depth_mm flipper_…¹ body_…² sex    year\n   <fct>   <fct>              <dbl>         <dbl>      <int>   <int> <fct> <int>\n 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007\n 2 Adelie  Torgersen           39.5          17.4        186    3800 fema…  2007\n 3 Adelie  Torgersen           40.3          18          195    3250 fema…  2007\n 4 Adelie  Torgersen           NA            NA           NA      NA <NA>   2007\n 5 Adelie  Torgersen           36.7          19.3        193    3450 fema…  2007\n 6 Adelie  Torgersen           39.3          20.6        190    3650 male   2007\n 7 Adelie  Torgersen           38.9          17.8        181    3625 fema…  2007\n 8 Adelie  Torgersen           39.2          19.6        195    4675 male   2007\n 9 Adelie  Torgersen           34.1          18.1        193    3475 <NA>   2007\n10 Adelie  Torgersen           42            20.2        190    4250 <NA>   2007\n# … with 142 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g\n\n\n]"
  },
  {
    "objectID": "slides/Data-wrangling-1.html#use-the-pipe-to-build-analysis-pipelines-1",
    "href": "slides/Data-wrangling-1.html#use-the-pipe-to-build-analysis-pipelines-1",
    "title": "Data wrangling 1",
    "section": "Use the pipe to build analysis pipelines",
    "text": "Use the pipe to build analysis pipelines\n.tiny-font[\n\n\n# A tibble: 152 × 2\n   island    sex   \n   <fct>     <fct> \n 1 Torgersen male  \n 2 Torgersen female\n 3 Torgersen female\n 4 Torgersen <NA>  \n 5 Torgersen female\n 6 Torgersen male  \n 7 Torgersen female\n 8 Torgersen male  \n 9 Torgersen <NA>  \n10 Torgersen <NA>  \n# … with 142 more rows\n\n\n]"
  },
  {
    "objectID": "slides/Data-wrangling-1.html#use-the-pipe-to-build-analysis-pipelines-2",
    "href": "slides/Data-wrangling-1.html#use-the-pipe-to-build-analysis-pipelines-2",
    "title": "Data wrangling 1",
    "section": "Use the pipe to build analysis pipelines",
    "text": "Use the pipe to build analysis pipelines\n.tiny-font[\n\n\n# A tibble: 8 × 3\n  island    sex        n\n  <fct>     <fct>  <int>\n1 Biscoe    female    22\n2 Biscoe    male      22\n3 Dream     female    27\n4 Dream     male      28\n5 Dream     <NA>       1\n6 Torgersen female    24\n7 Torgersen male      23\n8 Torgersen <NA>       5\n\n\n]"
  },
  {
    "objectID": "slides/Data-wrangling-1.html#make-a-new-table-column-mutate",
    "href": "slides/Data-wrangling-1.html#make-a-new-table-column-mutate",
    "title": "Data wrangling 1",
    "section": "Make a new table column: mutate()",
    "text": "Make a new table column: mutate()\n\n.center[ <img src = “data-wrangling-1_files/mutate.svg”, width = 75%>]"
  },
  {
    "objectID": "slides/Data-wrangling-1.html#example-flipper-length-in-cm",
    "href": "slides/Data-wrangling-1.html#example-flipper-length-in-cm",
    "title": "Data wrangling 1",
    "section": "Example: flipper length in cm",
    "text": "Example: flipper length in cm\n.tiny-font[\n\n\n# A tibble: 344 × 3\n   species island    flipper_length_mm\n   <fct>   <fct>                 <int>\n 1 Adelie  Torgersen               181\n 2 Adelie  Torgersen               186\n 3 Adelie  Torgersen               195\n 4 Adelie  Torgersen                NA\n 5 Adelie  Torgersen               193\n 6 Adelie  Torgersen               190\n 7 Adelie  Torgersen               181\n 8 Adelie  Torgersen               195\n 9 Adelie  Torgersen               193\n10 Adelie  Torgersen               190\n# … with 334 more rows\n\n\n]"
  },
  {
    "objectID": "slides/Data-wrangling-1.html#example-flipper-length-in-cm-1",
    "href": "slides/Data-wrangling-1.html#example-flipper-length-in-cm-1",
    "title": "Data wrangling 1",
    "section": "Example: flipper length in cm",
    "text": "Example: flipper length in cm\n.tiny-font[\n\n\n# A tibble: 344 × 4\n   species island    flipper_length_mm flipper_length_cm\n   <fct>   <fct>                 <int>             <dbl>\n 1 Adelie  Torgersen               181              18.1\n 2 Adelie  Torgersen               186              18.6\n 3 Adelie  Torgersen               195              19.5\n 4 Adelie  Torgersen                NA              NA  \n 5 Adelie  Torgersen               193              19.3\n 6 Adelie  Torgersen               190              19  \n 7 Adelie  Torgersen               181              18.1\n 8 Adelie  Torgersen               195              19.5\n 9 Adelie  Torgersen               193              19.3\n10 Adelie  Torgersen               190              19  \n# … with 334 more rows\n\n\n]"
  },
  {
    "objectID": "slides/Data-wrangling-1.html#make-multiple-columns-at-once",
    "href": "slides/Data-wrangling-1.html#make-multiple-columns-at-once",
    "title": "Data wrangling 1",
    "section": "Make multiple columns at once",
    "text": "Make multiple columns at once\n.tiny-font[\n\n\n# A tibble: 344 × 5\n   species island    flipper_length_mm flipper_length_cm flipper_length_in\n   <fct>   <fct>                 <int>             <dbl>             <dbl>\n 1 Adelie  Torgersen               181              18.1              7.13\n 2 Adelie  Torgersen               186              18.6              7.32\n 3 Adelie  Torgersen               195              19.5              7.68\n 4 Adelie  Torgersen                NA              NA               NA   \n 5 Adelie  Torgersen               193              19.3              7.60\n 6 Adelie  Torgersen               190              19                7.48\n 7 Adelie  Torgersen               181              18.1              7.13\n 8 Adelie  Torgersen               195              19.5              7.68\n 9 Adelie  Torgersen               193              19.3              7.60\n10 Adelie  Torgersen               190              19                7.48\n# … with 334 more rows\n\n\n]"
  },
  {
    "objectID": "slides/Data-wrangling-1.html#further-reading",
    "href": "slides/Data-wrangling-1.html#further-reading",
    "title": "Data wrangling 1",
    "section": "Further reading",
    "text": "Further reading\n\nR for Data Science: Chapter 5: Data transformation\nR for Data Science: Chapter 18: Pipes\ndplyr documentation: Introduction to dplyr\ndplyr reference documentation: One table verbs"
  }
]