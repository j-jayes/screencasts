---
title: "Chocolate bar ratings"
author: Jonathan Jayes
date: 04-15-2022
description: "An exploration of chocolte bar ratings"
image: "https://raw.githubusercontent.com/j-jayes/screencasts/main/figures/Chocolate_bar_ratings.jpeg"
format: 
  html:
    code-link: true
    code-overflow: wrap
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

Hello and welcome to the first episode of Kathy’s coding club. Today we’re doing to be looking at one of Kathy’s favourite foodstuffs – chocolate. 

We’re going to be diving into the reviews of chocolate bars from the Manhattan Chocolate Society, who have rated over 2500 chocolate bars from around the world. We are going to be trying to answer a few questions about their ratings. 

The data is accessible from the R for Data Science Tidy Tuesday repository on Github. 

If you have any questions about the different commands that we use and why - have a look at [this post](https://interludeone.com/posts/2022-01-17-flavours-of-cocoa/) on my website. You can click on any of the commands and read the documentation to get a better understanding of how they are used, or which package they are from.

Then let's get to it - the first step is to open a fresh Rmarkdown document - this allows you to keep human readable notes interspersed with your code that you can return to later, and export the prose and code in a number of different ways to share it, with colleagues or on the internet.

The next thing which I think is worth doing is to change the default IDE theme in Rstudio to darkmode. This is easier on your eyes and makes you look professional. You can find the Rstudio appearance settings under tools, and then global options. I like the Cobalt theme, but there are many to choose from.

One other thing I would suggest is the use of rainbow parentheses - these make it easy to see where you're missing a bracket. You can enable them under the code tab in Global options. 

Great - then let's get to it!

First we will call the tidyverse meta package - a cohesive group of packages that make working with messy data very easy - originally coined by Hadley Wickham but improved upon by a great many contributors. I'll leave a link in the description to more info about this.

Then we read in the data from the R4DS Tidy Tuesday Repo.

```{r}
library(tidyverse)

df <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-01-18/chocolate.csv')

theme_set(theme_light())
```

### EDA

First we can have a look at the data we have read in - This gives us a tibble (similar to a dataframe) with 10 columns (3 numeric and 7 character) and 2,530 individual reviews.

```{r}
df %>% view()

df %>% 
  count(company_location, sort = T)

df %>% 
  count(country_of_bean_origin, sort = T)
```


```{r}
#| column: page
df %>% 
  skimr::skim()
```


```{r}
df %>%
  ggplot(aes(rating)) +
  geom_histogram(binwidth = .25, fill = "midnightblue") +
  labs(x = "Chocolate bar rating",
       y = "Number of bars")
```

### Initial questions

- Have ratings been going up over time?

The first simple plot we can make to examine this question is a boxplot - 

```{r}
df %>% 
  ggplot(aes(review_date, rating, group = review_date)) +
  geom_boxplot()
```

```{r}
library(ggridges)

df %>%
  ggplot(aes(rating, y = factor(review_date), fill = review_date)) +
  geom_density_ridges() +
  scale_fill_viridis_c(option = "magma") +
  theme(legend.position = "bottom") +
  guides(fill = guide_colorbar(
    title.position = "bottom",
    barwidth = 25,
    title.hjust = .5
  )) +
    labs(y = NULL,
         x = "Chocolate bar rating",
         fill = "Date of review")
```


### What can we learn about the number of ingredients and cocoa percentage?

```{r}
df %>% 
  select(ingredients)

df %>% 
  separate(ingredients, into = c("n_ingredients", "ingredients"), sep = "-") %>% 
  # select(n_ingredients, ingredients) %>% 
  mutate(n_ingredients = parse_number(n_ingredients))
```


```{r}
#| column: page
#| fig-width: 10
#| fig-height: 8

# jpeg(filename = "figures/Chocolate_bar_ratings.jpeg",
#      height = 6,
#      width = 8,
#      units = "in",
#      res = 1000)

df %>% 
  separate(ingredients, into = c("n_ingredients", "ingredients"), sep = "-") %>% 
  mutate(across(c(n_ingredients, cocoa_percent), parse_number),
         cocoa_percent = cocoa_percent - cocoa_percent %% 5) %>% 
  count(cocoa_percent, n_ingredients) %>% 
  ggplot(aes(cocoa_percent, n_ingredients, fill = n)) +
  geom_tile() +
  scale_fill_viridis_c() +
  scale_x_continuous(labels = scales::percent_format(scale = 1)) +
  labs(x = "Cocoa percent",
       y = "Number of ingredients",
       fill = "Number of bars")

# dev.off()

df %>% 
  separate(ingredients, into = c("n_ingredients", "ingredients"), sep = "-") %>% 
  mutate(cocoa_percent = parse_number(cocoa_percent),
         cocoa_percent = round(cocoa_percent, 1)) %>% 
  count(cocoa_percent, n_ingredients) %>% 
  ggplot(aes(cocoa_percent, n_ingredients, fill = n)) +
  geom_tile() +
  scale_fill_viridis_c() +
  scale_x_continuous(labels = scales::percent_format(scale = 1)) +
  labs(x = "Cocoa percent",
       y = "Number of ingredients",
       fill = "Number of bars reviewed") +
  theme(legend.position = "bottom") +
  guides(fill = guide_colorbar(title.position = "bottom",
                               barwidth = 25,
                               title.hjust = .5))

```

### What do we know about the countries of origin?

```{r}
df %>% 
  add_count(country_of_bean_origin) %>%
  # only include countries with more than 60 bars
  filter(n > 60) %>% 
  group_by(country_of_bean_origin) %>% 
  summarise(mean_rating = mean(rating)) %>% 
  mutate(country_of_bean_origin = fct_reorder(country_of_bean_origin, mean_rating)) %>% 
  ggplot(aes(mean_rating, country_of_bean_origin)) +
  geom_col(fill = "midnightblue", alpha = .8) +
  # ensure that x-axis looks appropriate.
  coord_cartesian(xlim = c(3,3.3)) +
    labs(x = "Average rating for countries of origin with more than 60 bars reviewed",
         y = NULL)
```



### What are some fun variables??

```{r}
df %>% 
  select(most_memorable_characteristics, rating) %>% 
  separate_rows(most_memorable_characteristics, sep = ",") %>% 
  mutate(across(most_memorable_characteristics, str_squish)) %>% 
  add_count(most_memorable_characteristics) %>% 
  filter(n > 15) %>% 
  group_by(most_memorable_characteristics) %>% 
  summarise(mean_rating = mean(rating)) %>% 
  ungroup() %>% 
  arrange(mean_rating) %>% 
  slice(1:10, 69:78)

```

### Word model

```{r}
df_characteristics <- df %>% 
  select(c(most_memorable_characteristics, rating)) %>% 
  separate_rows(most_memorable_characteristics, sep = ",") %>% 
  mutate(most_memorable_characteristics = str_squish(most_memorable_characteristics))

df_characteristics %>% 
  count(most_memorable_characteristics, sort = T)
```

```{r}
df_characteristics %>% 
  group_by(most_memorable_characteristics) %>% 
  add_count() %>% 
  filter(n > 3) %>% 
  mutate(avg_rating = mean(rating)) %>% 
  ungroup() %>% 
  distinct(most_memorable_characteristics, avg_rating) %>% 
  slice_max(avg_rating, n = 12, with_ties = F) %>% 
    mutate(avg_rating = round(avg_rating, 2)) %>% 
    knitr::kable(col.names = c("Most memorable characteristics", "Average rating"))
```

```{r}
library(tidymodels)
library(textrecipes)

df_characteristics_folds <- vfold_cv(df_characteristics)

glmnet_recipe <- 
  recipe(formula = rating ~ ., data = df_characteristics) %>% 
  step_tokenize(most_memorable_characteristics) %>% 
  step_tokenfilter(most_memorable_characteristics, max_tokens = 100) %>% 
  step_tf(most_memorable_characteristics) %>% 
  step_normalize(all_predictors(), -all_nominal())

glmnet_recipe %>% prep() %>% juice()
```


```{r}
glmnet_spec <- 
  linear_reg(penalty = tune(), mixture = 1) %>% 
  set_mode("regression") %>% 
  set_engine("glmnet") 

glmnet_workflow <- 
  workflow() %>% 
  add_recipe(glmnet_recipe) %>% 
  add_model(glmnet_spec) 

glmnet_grid <- tidyr::crossing(penalty = 10^seq(-6, -1, length.out = 20)) 

glmnet_tune <- 
  tune_grid(glmnet_workflow, df_characteristics_folds, grid = glmnet_grid)

glmnet_tune %>% 
  autoplot()
```


```{r}
glmnet_model_final <- finalize_workflow(glmnet_workflow, glmnet_tune %>% 
  select_best())

final_fit <- glmnet_model_final %>% 
  fit(df_characteristics)
```

```{r}
#| column: page
#| fig-width: 10
#| fig-height: 8

final_fit %>%
  extract_fit_parsnip() %>%
  tidy() %>%
  filter(term != "(Intercept)") %>%
  mutate(term = str_remove(term, "tf_most_memorable_characteristics_")) %>%
  mutate(sign = estimate > 0) %>%
  group_by(sign) %>%
  mutate(estimate = abs(estimate)) %>% 
  slice_max(estimate, n = 12) %>%
  ungroup() %>%
  mutate(estimate = ifelse(sign == TRUE, estimate, -estimate)) %>% 
  mutate(term = fct_reorder(term, estimate)) %>%
  ggplot(aes(estimate, term, fill = sign)) +
  geom_col(show.legend = F) +
  geom_vline(xintercept = 0, lty = 2) +
  scale_fill_brewer(palette = "Paired") +
  labs(x = "Effect of term on chocolate bar score",
       y = "Memorable characteristic")
```

