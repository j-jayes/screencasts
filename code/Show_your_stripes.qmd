---
title: "Recreating Ed Hawkins' Show Your Stripes graphic"
author: Jonathan
date: 04-01-2022
description: "Using `ggplot` to recreate a classic climate change visualization."
image: "https://raw.githubusercontent.com/j-jayes/screencasts/main/figures/Show_your_stripes.jpeg"
format: 
  html:
    code-link: true
    code-overflow: wrap
---


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
theme_set(theme_light())
```

## Welcome

Hello and welcome to Kathy's coding club. Today we will be recreating a classic climate change visualization, Ed Hawkins' show your stripes graphic. This graphic shows how the global temperature has increased over time, as human activity has released carbon dioxide into the atmosphere and warmed the earth.

It is a powerful reminder of how human activity has resulted in climate change.

In this video we're going to ingest the data into R, do some exploratory analysis, and the recreate the visualization in `ggplot2`. 

Let's get to it. As always, if you have any questions about the commands that we are using, please leave a comment below, or have a look at the accompanying post that includes the code used in the analysis which follows. As you can see, you can click on any of the R commands and be taken to their documentation to see which package they are from, and for a better understanding of how each command works.

The original visualization is displayed on a website called ShowYourStripes, where you can select different regions to see how they have warmed. We're doing to be looking at the entire globe. 

```{r, echo=F}
knitr::include_url("https://showyourstripes.info/")
```

### Data 

From the Met office

The Met Office has a number of different series on their website here: https://www.metoffice.gov.uk/hadobs/hadcrut5/data/current/download.html 

"Time series are presented as temperature anomalies (deg C) relative to 1961-1990."

Monthly data?

```{r}
df <- readr::read_csv("https://www.metoffice.gov.uk/hadobs/hadcrut5/data/current/analysis/diagnostics/HadCRUT.5.0.1.0.analysis.summary_series.global.monthly.csv")

df <- df %>% 
  janitor::clean_names()
```

### EDA

Let's begin by looking at the dataset with the `skimr` package:

```{r}
#| column: page
df %>% skimr::skim()
```


```{r}
df %>% 
  ggplot(aes(time, anomaly_deg_c)) +
  geom_point()
```

The x-axis is a bit of a mess!

Let's rather try to change these to a date with the help of the `lubridate` package.

```{r}
df <- df %>% 
  mutate(time = lubridate::ymd(paste0(time, "-01")))

df %>%
  ggplot(aes(time, anomaly_deg_c)) +
  geom_point() +
  geom_smooth() +
  geom_hline(yintercept = 0, lty = 2)
```

Wow! That's way better - and now we have 

### What about the confidence intervals??

```{r}
df %>% 
  filter(str_detect(time, "\\d\\d\\d\\d-01.*")) %>% 
  ggplot(aes(x = time, ymin = lower_confidence_limit_2_5_percent, ymax = upper_confidence_limit_97_5_percent)) +
  geom_ribbon(alpha = .5) +
  geom_line(aes(x = time, y = anomaly_deg_c))
```

What about averaging across the year? We can make use of the `lubridate` package again! This time we use the `year` function to get the year (as a number) out of the time column.

```{r}
df %>% 
  mutate(year = lubridate::year(time)) %>% 
  group_by(year) %>% 
  mutate(across(anomaly_deg_c:upper_confidence_limit_97_5_percent, mean)) %>% 
  ungroup() %>% 
  distinct(year, .keep_all = T) %>% 
  ggplot(aes(x = time, ymin = lower_confidence_limit_2_5_percent, ymax = upper_confidence_limit_97_5_percent)) +
  geom_ribbon(fill = "grey70") +
  geom_line(aes(x = time, y = anomaly_deg_c))
```

We can see that as time goes on, we get better at measuring things with a lower margin of error.

### Recreating the figure

```{r}
#| column: page
df %>% 
  ggplot(aes(time, y = 1, fill = anomaly_deg_c)) + 
  geom_tile() +
  scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0) +
  theme(legend.position = "none",
        panel.grid = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank()) +
  labs(x = "Year",
       y = NULL,
       caption = "Inspired by Ed Hawkins\nData from the Met Office")
```


```{r}
#| column: page

# jpeg(filename = "figures/Show_your_stripes.jpeg",
#      height = 6,
#      width = 8,
#      units = "in",
#      res = 1000)

df %>%
  mutate(year = lubridate::year(time)) %>%
  group_by(year) %>%
  mutate(across(anomaly_deg_c:upper_confidence_limit_97_5_percent, mean)) %>%
  ungroup() %>%
  distinct(year, .keep_all = T) %>%
  ggplot(aes(time, y = 1, fill = anomaly_deg_c)) +
  geom_tile() +
  scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0) +
  theme(
    legend.position = "none",
    panel.grid = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank()
  ) +
  labs(
    x = "Year",
    y = NULL,
    caption = "Inspired by Ed Hawkins\nData from the Met Office"
  )

# dev.off()
```

### Bars with scale

```{r}
df %>%
  ggplot(aes(time, anomaly_deg_c, fill = anomaly_deg_c)) +
  geom_col() +
  scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0) +
  geom_hline(yintercept = 0, lty = 2) +
  theme(legend.position = "bottom") +
  guides(fill = guide_colorbar(barwidth = 25, barheight = 1, title.position = "top", title.hjust = 0.5))
```

### Interactive chart

```{r}
library(ggiraph)

g <- df %>%
  mutate(year = lubridate::year(time)) %>%
  group_by(year) %>%
  mutate(across(anomaly_deg_c:upper_confidence_limit_97_5_percent, mean)) %>%
  ungroup() %>%
  distinct(year, .keep_all = T) %>%
  mutate(tooltip = round(anomaly_deg_c, digits = 2),
         tooltip = str_c("Degree deviation from base period ", tooltip, " c")) %>% 
  ggplot(aes(time, y = 1, fill = anomaly_deg_c, tooltip = tooltip)) +
  geom_tile_interactive() +
  scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0) +
  theme(
    legend.position = "none",
    panel.grid = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank()
  ) +
  labs(
    x = "Year",
    y = NULL,
    caption = "Inspired by Ed Hawkins\nData from the Met Office"
  )


ggiraph(ggobj = g)
```

