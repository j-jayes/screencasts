{"title":"Recreating Ed Hawkins' Show Your Stripes graphic","markdown":{"yaml":{"title":"Recreating Ed Hawkins' Show Your Stripes graphic","author":"Jonathan","date":"04-01-2022","description":"Using `ggplot` to recreate a classic climate change visualization.","image":"https://raw.githubusercontent.com/j-jayes/screencasts/main/figures/Show_your_stripes.jpeg","format":{"html":{"code-link":true,"code-overflow":"wrap"}},"draft":false,"execute":{"freeze":false}},"headingText":"Checks","containsRefs":false,"markdown":"\n\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n\nClean environment in Rstuido\nFolder path in Rstudio\n\n## Welcome\n\nHello and welcome to my collection of screencasts. Today we will be recreating a classic climate change visualization, the *show your stripes* graphic by Ed Hawkins. This graphic shows how the global temperature has increased over time, going from blue to red on the colour scale.\n\nIt is a powerful reminder of how our human activity has resulted in climate change.\n\nIn this video we're going to ingest the data into R, do some exploratory analysis, and the recreate the visualization in `ggplot`. \n\nAs usual, if you have any questions about the commands that we are using, please feel free to leave a comment below, or have a look at the accompanying post linked in the description that includes the code used in the analysis which follows. \n\nAs you can see, in this post you can click on any of the commands and be taken to their documentation to see which package they are from, and how each command works.\n\n```{r, echo=F}\nknitr::include_url(\"https://showyourstripes.info/\")\n```\n\n### Rstudio\n\nLet's open up Rstudio now and create a fresh Rmarkdown document.\n\nWe can clear out the boilerplate code that is in place to show us how Rmarkdown documents work, and create some scaffolding for our analysis.\n\nWe're going to want to include a section on:\n\n- reading in the data\n- some exploratory data analysis\n- recreating the figure\n- adding interactivity\n\n### Data \n\nThe original visualization is displayed on a website called ShowYourStripes.info, where you can select different regions to see how they have warmed over time. We're doing to be looking at the entire globe. \n\n\nIf you click on the FAQ section, we can see that the global data is sourced from the UK's met office. We can head on over to their website to understand a bit more about the data and download it.\n\nWe read that the \"Time series are presented as temperature anomalies (deg C) relative to 1961-1990.\" This means we aren't getting an average temperature, but rather the deviation from the average temperature globally in the base period from 1961 to 1990.\n\nWe can select the global series at monthly level, and copy the link address so as to read it directly into Rstudio.\n\nThe first thing we will do is load the tidyverse meta package.\n\nWe can then use the readr package to read in the comma separated value file as a dataframe named df. \n\nIf we print the dataframe in the console, we can see that it has four columns and 2,066 rows.\n\n```{r}\nlibrary(tidyverse)\ntheme_set(theme_light())\n\ndf <- readr::read_csv(\"https://www.metoffice.gov.uk/hadobs/hadcrut5/data/current/analysis/diagnostics/HadCRUT.5.0.1.0.analysis.summary_series.global.monthly.csv\")\n```\n\nIf we ask for the column names we can see that they're a little bit difficult to work with, containing parentheses and percentage signs. \n\n```{r}\ndf %>% colnames()\n```\n\nWe can use the janitor package to clean up the names into camel case, where all of the letters are in lower case and words are separated by underscores.\n\n```{r}\ndf <- df %>% \n  janitor::clean_names()\n\ndf %>% colnames()\n```\n\nHelpfully the janitor command clean names also changes the percentage signs to the word percent.\n\nLet's now try to get a better feel for the data.\n\n### EDA\n\nLet's begin by looking at the dataset with the `skimr` package:\n\n```{r}\n#| column: page\ndf %>% skimr::skim()\n```\n\nWe can see that we have three numeric columns and one character column, time. The data is all complete, with no missing values.\n\nLet's see if we can plot the data using `ggplot`.\n\nWe use `ggplot`'s aesthetic mapping here, putting time on the x-axis and the temperature anomaly in degrees Celsius on the y-axis.\n\n```{r}\ndf %>% \n  ggplot(aes(x = time, y = anomaly_deg_c)) +\n  geom_point()\n```\n\nThe x-axis is a bit of a mess! That's because th time variable is stored as a character, rather than a date:\n\n```{r}\ndf %>% select(time)\n```\n\nLet's rather try to change these characters to a date with the help of the `lubridate` package.\n\nThe `lubridate` command ymd here will parse a date in the form, year, then month, and then day. Because our data comes with just a year and month value, we can paste a string indicating the first of the month with the `paste0` command from base R.\n\n```{r}\ndf <- df %>% \n  mutate(time = lubridate::ymd(paste0(time, \"-01\")))\n```\n\nNow let us try and plot the data again - using the `geom_smooth` command to add a smoothed line in top of the points.\n\n```{r}\ndf %>%\n  ggplot(aes(x = time, y = anomaly_deg_c)) +\n  geom_point() +\n  geom_smooth() +\n  geom_hline(yintercept = 0, lty = 2)\n```\n\nWow! That's way better. We also added a dotted line at y = 0 to show use which values are below and above the baseline temperature level.\n\n### Recreating the figure\n\nIf we want to recreate the figure from Ed Hawkins, we can use the geom_tile geometry in `ggplot`. \n\nIn this case, we are going to map time onto the x-axis, and the deviation from the base temperature to the fill aesthetic. For the y-axis we will just choose an arbitrary constant, in this case 1.\n\n```{r}\ndf %>% \n  ggplot(aes(x = time, y = 1, fill = anomaly_deg_c)) +\n  geom_tile()\n```\n\nNow we're getting somewhere, we can see that the colour is lighter to the right of the figure - but we need to improve our colour scale in order to match that of the original graphic.\n\nLet's add a gradient colour scale with the command `scale_fill_gradient2` from `ggplot`. Here we can specify we want the low values to be blue, the high values red, the mid values white, and the point at which the white is shown as zero.\n\n```{r}\ndf %>%\n  ggplot(aes(x = time, y = 1, fill = anomaly_deg_c)) +\n  geom_tile() +\n  scale_fill_gradient2(low = \"blue\", high = \"red\", mid = \"white\", midpoint = 0)\n```\n\nThat's great! Let's now remove some of the superfluous elements and add in some labels.\n\nIn this case, we are going to remove the legend as this graphic is more about the message than the actual values. \n\n```{r}\n#| column: page\ndf %>%\n  ggplot(aes(x = time, y = 1, fill = anomaly_deg_c)) +\n  geom_tile() +\n  scale_fill_gradient2(low = \"blue\", high = \"red\", mid = \"white\", midpoint = 0) +\n  theme(\n    legend.position = \"none\",\n    panel.grid = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank()\n  ) +\n  labs(\n    x = \"Year\",\n    y = NULL,\n    caption = \"Inspired by Ed Hawkins\\nData from the Met Office\"\n  )\n```\n\nFinally, we can remove a bit of the noise in the figure calculating a yearly average from our monthly values. Here we can use the `group_by` and `across` function from dplyr.\n\nWe create a grouping variable with the `lubridate::year` command, group by year, and then use the across function to calculate the mean for each year for our three numeric variables.\n\n```{r}\ndf <- df %>%\n  mutate(year = lubridate::year(time)) %>%\n  group_by(year) %>%\n  mutate(across(anomaly_deg_c:upper_confidence_limit_97_5_percent, mean)) %>%\n  ungroup() %>% \n  distinct(year, .keep_all = T)\n```\n\nNext we can reuse the graphics code from above to create a chart that more closely matches the version we saw on showyourstripes.info.\n\n```{r}\n#| column: page\n\ndf %>%\n  ggplot(aes(time, y = 1, fill = anomaly_deg_c)) +\n  geom_tile() +\n  scale_fill_gradient2(low = \"blue\", high = \"red\", mid = \"white\", midpoint = 0) +\n  theme(\n    legend.position = \"none\",\n    panel.grid = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank()\n  ) +\n  labs(\n    x = \"Year\",\n    y = NULL,\n    caption = \"Inspired by Ed Hawkins\\nData from the Met Office\"\n  )\n```\n\n### Interactive chart\n\nIn addition, if we are going to publish our figure online, it might be fun to introduce a bit of interactivity. This is easily accomplished with the `ggiraph` package.\n\nThis package takes static `ggplot` geometries and makes them interactive such that hovering over the figure shows a data value beside the cursor.\n\nThere are three steps:\n\n1. We modify our graphics code from `geom_tile` to `geom_tile_interactive`\n\n2. We add in an argument for the `tooltip` value in the `ggplot` aesthetic mapping\n\n3. We assign our graphics code to an R object and call it from inside the command `ggiraph`.\n\n```{r}\nlibrary(ggiraph)\n\ng <- df %>%\n  ggplot(aes(time, y = 1, fill = anomaly_deg_c, tooltip = anomaly_deg_c)) +\n  geom_tile_interactive() +\n  scale_fill_gradient2(low = \"blue\", high = \"red\", mid = \"white\", midpoint = 0) +\n  theme(\n    legend.position = \"none\",\n    panel.grid = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank()\n  ) +\n  labs(\n    x = \"Year\",\n    y = NULL,\n    caption = \"Inspired by Ed Hawkins\\nData from the Met Office\"\n  )\n\n\ng_out <- ggiraph(ggobj = g)\n\ng_out\n```\n\nWe can improve this interactive figure by rounding off the temperature anomaly value, and adding some context to our tooltip:\n\n```{r}\ng <- df %>% \n  mutate(tooltip = round(anomaly_deg_c, digits = 2),\n         tooltip = str_c(\"Degree deviation from base period in \", year, \"\\n\", tooltip, \" c\")) %>% \n  ggplot(aes(time, y = 1, fill = anomaly_deg_c, tooltip = tooltip)) +\n  geom_tile_interactive() +\n  scale_fill_gradient2(low = \"blue\", high = \"red\", mid = \"pink\", midpoint = 0) +\n  theme(\n    legend.position = \"none\",\n    panel.grid = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank()\n  ) +\n  labs(\n    x = \"Year\",\n    y = NULL,\n    caption = \"Inspired by Ed Hawkins\\nData from the Met Office\"\n  )\n\n\ng_out <- ggiraph(ggobj = g)\n\ng_out\n```\n\n\n### Post script\n\n#### What about the confidence level?\n\nWhat about averaging across the year? We can make use of the `lubridate` package again! This time we use the `year` function to get the year (as a number) out of the time column.\n\n```{r}\ndf %>%\n  mutate(year = lubridate::year(time)) %>%\n  group_by(year) %>%\n  mutate(across(anomaly_deg_c:upper_confidence_limit_97_5_percent, mean)) %>%\n  ungroup() %>%\n  distinct(year, .keep_all = T) %>%\n  ggplot(aes(x = time, ymin = lower_confidence_limit_2_5_percent, ymax = upper_confidence_limit_97_5_percent)) +\n  geom_ribbon(fill = \"grey70\") +\n  geom_line(aes(x = time, y = anomaly_deg_c))\n```\n\nWe can see that as time goes on, we get better at measuring things with a lower margin of error.\n\n#### Bars with scale\n\n```{r}\ndf %>%\n  ggplot(aes(time, anomaly_deg_c, fill = anomaly_deg_c)) +\n  geom_col() +\n  scale_fill_gradient2(low = \"blue\", high = \"red\", mid = \"white\", midpoint = 0) +\n  geom_hline(yintercept = 0, lty = 2) +\n  theme(legend.position = \"bottom\") +\n  guides(fill = guide_colorbar(barwidth = 25, barheight = 1, title.position = \"top\", title.hjust = 0.5))\n```\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":true,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"Show_your_stripes.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.237","editor":"source","theme":{"light":["cosmo","../theme.scss"]},"title":"Recreating Ed Hawkins' Show Your Stripes graphic","author":"Jonathan","date":"04-01-2022","description":"Using `ggplot` to recreate a classic climate change visualization.","image":"https://raw.githubusercontent.com/j-jayes/screencasts/main/figures/Show_your_stripes.jpeg","draft":false},"extensions":{"book":{"multiFile":true}}}}}